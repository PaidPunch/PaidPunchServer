/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package payment;

import com.db.DataAccess;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.List;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import com.server.Constants;
import com.server.SAXParserExample;
import com.server.aczreqElements;
import java.io.StringReader;
import java.util.Vector;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletInputStream;
import net.authorize.CustomerProfileCommunication;
import org.xml.sax.InputSource;

/**
 *
 * @author qube26
 */
public class payment_detail extends HttpServlet {

    ServletConfig config = null;
    private Vector userdata, userinfo;

    /**
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
        ServletContext context;
        try {
            response.setContentType("text/html;charset=UTF-8");
            List list;
            try {
                config = getServletConfig();
                context = config.getServletContext();
                Constants.loadJDBCConstants(context);
            } catch (Exception e) {
                Constants.logger.error(e);
            }
            try {
                ServletInputStream in = request.getInputStream();

                SAXParserExample example = new SAXParserExample();


                int info;
                StringBuffer sb = new StringBuffer();
                while ((info = in.read()) != -1) {
                    char temp;
                    temp = (char) info;
                    sb.append(temp);
                }
                Constants.logger.info("-------------paid_punch---------------");

                Constants.logger.info("XML File" + sb);
                String xmldata = new String(sb);
                xmldata = xmldata.trim();
                InputSource iSource = new InputSource(new StringReader(xmldata));

                example.parseDocument(iSource);
                list = example.getData();
                aczreqElements arz = (aczreqElements) list.get(0);
                String reqtype = arz.getTxtype();


                if (reqtype.equalsIgnoreCase("profile-REQ")) {
                //String cardtype=arz.getCardtype();
                    CustomerProfileCommunication profile = new CustomerProfileCommunication();
                    Vector profile_data = profile.createCustomerProfileAuth(arz.getName(), arz.getEmail(), arz.getCardno(), arz.getExp_date(), arz.getCvv());
                    Constants.logger.info(profile_data.elementAt(0).toString() + ":" + profile_data.elementAt(2).toString() + ":" + profile_data.elementAt(1).toString() + ":");
                    String code = profile_data.elementAt(0).toString();
                    if (code.equalsIgnoreCase("00")) {
                        String profileid = profile_data.elementAt(1).toString();
                        Vector get_profile_data = profile.getCustomerProfileAuth(profileid);
                        String get_code = get_profile_data.elementAt(0).toString();
                        String get_meas = get_profile_data.elementAt(1).toString();
                        if (code.equalsIgnoreCase("00")) {
                            String payid = get_profile_data.elementAt(2).toString();
                            String maskno = get_profile_data.elementAt(3).toString();
                            String userid = arz.getUserId();
                            DataAccess da = new DataAccess();
                            da.insert_profileid("app_user", userid, profileid);
                            getprofilexml(response, get_meas, code, maskno, payid);
                            //xml(response,"successful","00");
                            return;
                        }
                    } else {
                        xml(response, profile_data.elementAt(2).toString(), "01");
                        return;
                    }
                }
                if (reqtype.equalsIgnoreCase("Get-Profile-REQ")) {
                    String userid = arz.getUserId();
                    DataAccess da = new DataAccess();
                    Vector profile_info = da.getprofileid(userid);
                    if(profile_info==null)
                    {
                     xml(response, "Failed to process request.Please try again.", "01");
                     return;
                    }
                    String profileid=profile_info.elementAt(0).toString();
                    //String card_type=profile_info.elementAt(1).toString();
                    CustomerProfileCommunication profile = new CustomerProfileCommunication();
                    Vector profile_data = profile.getCustomerProfileAuth(profileid);
                    String code = profile_data.elementAt(0).toString();
                    String meas = profile_data.elementAt(1).toString();


                    if (code.equalsIgnoreCase("00")) {
                        String payid = profile_data.elementAt(2).toString();
                        String maskno = profile_data.elementAt(3).toString();
                        getprofilexml(response, meas, code, maskno, payid);
                        return;
                    } else {
                        String payid = "";
                        String maskno = "";
                        getprofilexml(response, meas, code, maskno, payid);
                         return;
                    }

                }



            } catch (Exception ex) {
                Constants.logger.error(ex);
            }
        } catch (Exception e) {
            Constants.logger.error(e);
        }
    }

    private void xml(HttpServletResponse p_response, String mesage, String code) {

        String statusCode = code;
        String statusMessage = mesage;

        try {
            PrintWriter out = p_response.getWriter();


            Constants.logger.info("statuscode" + statusCode);
            Constants.logger.info("statusmessage" + statusMessage);

            p_response.setHeader("Content-Disposition", "attachement; filename= response.xml");
            out.print("<?xml version='1.0' ?>"
                    + "<paidpunch-resp>"
                    + "<statusCode>" + statusCode + "</statusCode>");
            out.print("<statusMessage>" + statusMessage + "</statusMessage>");


            out.print("</paidpunch-resp>");


        } catch (Exception e) {
            Constants.logger.error(e);
        }

    }

    private void getprofilexml(HttpServletResponse p_response, String mesage, String code, String masked, String payid) {

        String statusCode = code;
        String statusMessage = mesage;

        try {
            PrintWriter out = p_response.getWriter();


            Constants.logger.info("statuscode" + statusCode);
            Constants.logger.info("statusmessage" + statusMessage);

            p_response.setHeader("Content-Disposition", "attachement; filename= response.xml");
            String xml = "<?xml version='1.0' ?>"
                    + "<paidpunch-resp>"
                    + "<statusCode>" + statusCode + "</statusCode>"
                    + "<masked>" + masked + "</masked>"
                    + "<paymentid>" + payid + "</paymentid>"
                    + "<statusMessage>" + statusMessage + "</statusMessage>";
            Constants.logger.info(xml);
            out.print(xml);


            out.print("</paidpunch-resp>");


        } catch (Exception e) {
            Constants.logger.error(e);
        }

    }
    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">

    /**
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
        }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
}
