/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.db;

import java.io.UnsupportedEncodingException;
//import com.common.Utility;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import com.server.Constants;

import java.util.Vector;
import com.db.DataAccessControler;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author qube26
 */
public class DataAccess {

    public String login(String user, String password, String sessionid) throws UnsupportedEncodingException {

        byte[] test = user.getBytes("UTF-8");
        user = new String(test, "UTF-8");
        Vector ids = new Vector();
        String result = "02";
        ids.add("username");
        ids.add("Password");
        Vector rowdata = new Vector();
        rowdata.add(user);
        rowdata.add(password);
        String userid = "";
        try {
            Vector dataFromTable = DataAccessControler.getDataFromTable("app_user");
            for (int j = 0; j < dataFromTable.size(); j++) {
                Vector data = (Vector) dataFromTable.elementAt(j);
                //email
                String username = (String) data.elementAt(2);
                //already login
                String status = "" + data.elementAt(6);

                if (username.equals(user)) {
                    //password
                    String pass = "" + data.elementAt(4);
                    if (pass.equals(password)) {
//                      //only one login condition
                        // if (status.equalsIgnoreCase("Y")) {
//                            return "03";
//                        }
                        userid = "" + data.elementAt(0);
                        // email verifection code
                        String verification = "" + data.elementAt(7);
                        if (verification.equals("N")) {
                            return "04";
                        }
                        // int res = DataAccessControler.updatetDataToTable("app_user", "user_id", userid, "user_status", "Y");
                        int res = DataAccessControler.updatetDataToTable("app_user", "user_id", userid, "sessionid", sessionid);
                        if (res == -1) {
                            return "03";
                        }
                        return userid;
                    }
                    return "01";
                }

            }
        } catch (Exception ex) {
            Constants.logger.error(ex.getMessage());


        }
        return result;
    }

    public Vector merchant_login(String user, String password) throws UnsupportedEncodingException {

        byte[] test = user.getBytes("UTF-8");
        Vector rowdata = new Vector();
        user = new String(test, "UTF-8");
        // Vector ids = new Vector();
        String userid = "";
        try {
            Vector dataFromTable = DataAccessControler.getDataFromTable("business_users");

            for (int j = 0; j < dataFromTable.size(); j++) {
                Vector data = (Vector) dataFromTable.elementAt(j);
                //email
                String username = (String) data.elementAt(2);
                //already login
                //  String status = "" + data.elementAt(6);

                if (username.equals(user)) {
                    //password
                    String pass = "" + data.elementAt(3);
                    if (pass.equals(password)) {
                        userid = "" + data.elementAt(0);
                        rowdata.add("00");
                        rowdata.add(userid);
                        rowdata.add(data.elementAt(1));
                        rowdata.add(data.elementAt(7));

                        Vector puchdata = (Vector) DataAccessControler.getDataFromTable("punch_card", "business_userid", userid).elementAt(0);
                        rowdata.add(puchdata.elementAt(2));
                        rowdata.add(puchdata.elementAt(3));
                        rowdata.add(puchdata.elementAt(4));

                        return rowdata;
                    }
                    rowdata.add("01");
                    return rowdata;
                }

            }
        } catch (Exception ex) {
            Constants.logger.error(ex.getMessage());


        }
        rowdata.add("02");
        return rowdata;
    }

    public String logout(String userid) {
        Vector ids = new Vector();
        String result = "02";

        try {

            int res = DataAccessControler.updatetDataToTable("app_user", "user_id", userid, "user_status", "N");
            if (res == 1) {
                return userid;
            }
            return "01";






        } catch (Exception ex) {
            Constants.logger.error(ex.getMessage());


        }
        return result;
    }

    public String UserRegistration(Vector rowdata) throws SQLException {
        String email = (String) rowdata.elementAt(1);
        String userid = "";
        boolean b = DataAccessControler.getUserValidation("app_user", "email_id", email);
        if (b) {
            return "01";
        }
        int i = DataAccessControler.insertData("app_user", rowdata);
        if (i == -1) {
            return "02";
        } else {
            return "00";
        }
    }

    public boolean check_fbid(String id) {
        Connection l_conn = null;
        PreparedStatement l_prepStat = null;
        try {
            DataAccessControler dac = new DataAccessControler();
            l_conn = dac.createConnection();
            l_prepStat = l_conn.prepareStatement("SELECT user_id FROM paidpunch.app_user a where fbid=?;");
            // Constants.logger.info("l_callStat::{}"+l_prepStat);
            l_prepStat.setString(1, id);

            Constants.logger.info("l_callStat ::{}" + l_prepStat);

            ResultSet l_rs = l_prepStat.executeQuery();
            if (l_rs.next()) {
                l_rs.close();
                l_prepStat.close();
                l_conn.close();
                return true;
            } else {
                l_rs.close();
                l_prepStat.close();
                l_conn.close();
                return false;
            }



        } catch (SQLException e) {
            try {
                l_prepStat.close();
                l_conn.close();
                Constants.logger.error("Error : " + e.getMessage());
                return false;
            } catch (Exception ex) {
                Constants.logger.error("Error : " + ex.getMessage());
                return false;
            }
        }





    }

    public boolean check_free_punch(String punchid, String appuserid) {
        Connection l_conn = null;
        PreparedStatement l_prepStat = null;
        try {
            DataAccessControler dac = new DataAccessControler();
            l_conn = dac.createConnection();
            l_prepStat = l_conn.prepareStatement("select * from punchcard_download where app_user_id=" + appuserid + " and isfreepunch='true' and punch_card_id='" + punchid + "';");
            // Constants.logger.info("l_callStat::{}"+l_prepStat);


            Constants.logger.info("l_callStat ::{}" + l_prepStat);

            ResultSet l_rs = l_prepStat.executeQuery();
            if (l_rs.next()) {
                l_rs.close();
                l_prepStat.close();
                l_conn.close();
                return true;
            } else {
                l_rs.close();
                l_prepStat.close();
                l_conn.close();
                return false;
            }



        } catch (SQLException e) {
            try {
                l_prepStat.close();
                l_conn.close();
                Constants.logger.error("Error : " + e.getMessage());
                return false;
            } catch (Exception ex) {
                Constants.logger.error("Error : " + ex.getMessage());
                return false;
            }
        }

    }

    public boolean fb_Registration(String fbid, String email, String name, String sessionid) {
        Connection l_conn = null;
        PreparedStatement l_prepStat = null;
        try {

            java.sql.Time time = new java.sql.Time(new Date().getTime());
            java.sql.Date date = new java.sql.Date(new Date().getTime());
            String l_query = "insert into app_user(username,email_id,user_status,isemailverified,Date,Time,sessionid,isfbaccount,fbid)values('" + name + "','" + email + "','Y','Y','" + date + "','" + time + "','" + sessionid + "','Y','" + fbid + "');";
            Constants.logger.info("l_callStat ::{}" + l_query);
            DataAccessControler dac = new DataAccessControler();
            l_conn = dac.createConnection();
            l_prepStat = l_conn.prepareStatement(l_query);
            // Constants.logger.info("l_callStat::{}"+l_prepStat);


            Constants.logger.info("l_callStat ::{}" + l_prepStat);

            int l_rs = l_prepStat.executeUpdate();
            if (l_rs != 0) {
                l_prepStat.close();
                l_conn.close();
                return true;
            } else {
                l_prepStat.close();
                l_conn.close();
                return false;
            }



        } catch (SQLException e) {
            try {
                l_prepStat.close();
                l_conn.close();
                Constants.logger.error("Error : " + e.getMessage());
                return false;
            } catch (SQLException ex) {
                Constants.logger.error("Error : " + ex.getMessage());
                return false;
            }
        }


    }

    public boolean fb_login(String fbid, String email, String name, String sessionid) {
        Connection l_conn = null;
        PreparedStatement l_prepStat = null;
        try {

            java.sql.Time time = new java.sql.Time(new Date().getTime());
            java.sql.Date date = new java.sql.Date(new Date().getTime());
            String l_query = "UPDATE app_user SET username=?,email_id=?,user_status=?,Date=?,Time=?,sessionid=? WHERE FBid =" + fbid + ";";
            Constants.logger.info("l_callStat ::{}" + l_query);
            DataAccessControler dac = new DataAccessControler();
            l_conn = dac.createConnection();
            l_prepStat = l_conn.prepareStatement(l_query);
            l_prepStat.setObject(1, name);
            l_prepStat.setObject(2, email);
            l_prepStat.setObject(3, "Y");
            l_prepStat.setObject(4, date);
            l_prepStat.setObject(5, time);
            l_prepStat.setObject(6, sessionid);

            // Constants.logger.info("l_callStat::{}"+l_prepStat);


            Constants.logger.info("l_callStat ::{}" + l_prepStat);

            int l_rs = l_prepStat.executeUpdate();

            return true;



        } catch (SQLException e) {
            try {
                l_prepStat.close();
                l_conn.close();
                Constants.logger.error("Error : " + e.getMessage());
                return false;
            } catch (SQLException ex) {
                Constants.logger.error("Error : " + ex.getMessage());
                return false;
            }
        }


    }

    public static int insert_profileid(String p_table, String userid, String profileid) {


        Connection l_conn = null;
        PreparedStatement l_prepStat = null;
        int result = -1;
        try {
            DataAccessControler dac = new DataAccessControler();
            l_conn = dac.createConnection();
        } catch (Exception e) {
            e.printStackTrace();
        }

        String l_query;

        l_query = "update app_user  set isprofile_created=?,profile_id=? where user_id =? ;";

        Constants.logger.info("l_query.toString()::{}" + l_query.toString());
        try {
            l_prepStat = l_conn.prepareStatement(l_query.toString());
            l_prepStat.setObject(1, "true");
            l_prepStat.setObject(2, profileid);
            
            l_prepStat.setObject(3, userid);
            // Constants.logger.info("l_callStat::{}"+l_prepStat);
        } catch (SQLException e) {
            Constants.logger.error("", e);
        }

        Constants.logger.info("insert data in" + l_prepStat.toString());

        try {
            result = l_prepStat.executeUpdate();
        } catch (SQLException e) {
            Constants.logger.error("", e);
        } finally {
            try {
                l_conn.close();
            } catch (SQLException ex) {
                Constants.logger.error("", ex);
            }
        }
        return result;
    }

    public Vector getprofileid(String userid) {
        Connection l_conn = null;
        PreparedStatement l_prepStat = null;
        try {
            DataAccessControler dac = new DataAccessControler();
            l_conn = dac.createConnection();
            l_prepStat = l_conn.prepareStatement("select profile_id from app_user where user_id='" + userid + "';");
           Constants.logger.info("l_callStat::{}"+l_prepStat.toString());


            Vector profile=new Vector();
            ResultSet l_rs = l_prepStat.executeQuery();
            if (l_rs.next()) {
                profile.add(l_rs.getObject(1).toString());
                         l_rs.close();
                l_prepStat.close();
                l_conn.close();
                return profile;
            } else {
                l_rs.close();
                l_prepStat.close();
                l_conn.close();
                return profile;
            }



        } catch (SQLException e) {
            try {
                l_prepStat.close();
                l_conn.close();
                Constants.logger.error("Error : " + e.getMessage());
                return null;
            } catch (Exception ex) {
                Constants.logger.error("Error : " + ex.getMessage());
                return null;
            }
        }

    }

    public String getpaymentID() {
        Connection l_conn = null;
        PreparedStatement l_prepStat = null;
        try {
            DataAccessControler dac = new DataAccessControler();
            l_conn = dac.createConnection();
            l_prepStat = l_conn.prepareStatement("Select LAST_INSERT_ID() from payment_details ;");
            // Constants.logger.info("l_callStat::{}"+l_prepStat);

            Constants.logger.info("l_callStat ::{}" + l_prepStat);

            ResultSet l_rs = l_prepStat.executeQuery();
            l_rs.next();
            String id = l_rs.getObject(1).toString();
            l_rs.close();
            l_prepStat.close();
            l_conn.close();
            return id;



        } catch (SQLException e) {
            try {
                l_prepStat.close();
                l_conn.close();
                Constants.logger.error("Error : " + e.getMessage());
                return "";
            } catch (Exception ex) {
                Constants.logger.error("Error : " + ex.getMessage());
                return "";
            }
        }





    }
}
