/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.jspservlets;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.File;
import java.io.FileInputStream;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import com.mysql.jdbc.Statement;

import java.util.Date;
import java.sql.ResultSet;
import java.sql.SQLException;

import java.util.Random;
import javax.servlet.ServletConfig;
import javax.servlet.ServletContext;
import javax.servlet.ServletException;

import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.mail.*;
import java.security.Security;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Properties;
import javax.mail.Message.RecipientType;
/**
 *
 * @author admin
 */
public class signup_paidpunch_add extends HttpServlet {

      ServletConfig config = null;
      ServletContext context;
        DBConnection db;
       Connection conn = null;
       PreparedStatement pstmt=null;
       Statement st =  null;
       ResultSet rs = null;
    java.sql.Date sqlDate = null;
    HttpSession session=null;
    String path="",businessname="",businessdesc="",email="",password="",securityCode="",actualLogoPath="";
    String businessaddress="",city="",state="",pincode="",countrycode="",contactnumber="",contactname="";
    String punchCardName="",noofpunches="",valueofpunch="",selling_price_punch="",discount="",expirydate="",orangeCode="",value_of_each_punch_disc="";
    float disc_value_of_each_punch=0, float_val_of_each_punch=0, float_val_of_each_punchcard=0;
    int restriction_time=0;

//        final String SMTP_HOST_NAME = "smtp.gmail.com";
//        final String SMTP_AUTH_USER = "mobimedia.mm@gmail.com";
//        final String SMTP_AUTH_PWD  = "mobimedia";

    final String SMTP_HOST_NAME = "mail.paidpunch.com";
         final String SMTP_AUTH_USER = "noreply@paidpunch.com";
         final String SMTP_AUTH_PWD  = "nor3ply";

         String emailMsgTxt      = "";
         final String emailSubjectTxt  = "PaidPunch Verification Email";
  //       final String emailFromAddress = "mobimedia.mm@gmail.com";
        final String emailFromAddress = "noreply@paidpunch.com";
        final String SMTP_PORT = "25";
  //       final String SMTP_PORT = "465";
        final String SSL_FACTORY = "javax.net.ssl.SSLSocketFactory";
         String recipient_email_id = "";

    /** 
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        try{
            session = request.getSession(false);
        }catch(Exception e){
            
        }

        try{
           config = getServletConfig();

        context = config.getServletContext();
       }catch(Exception e){

       }
        com.server.Constants.loadJDBCConstants(context);
        PrintWriter out = response.getWriter();
        try{
            securityCode = session.getAttribute("secretcode").toString();
            email = session.getAttribute("email").toString();
            password = session.getAttribute("password").toString();
            businessname = session.getAttribute("businessname").toString();
            businessdesc = session.getAttribute("businessdesc").toString();
            path = session.getAttribute("filepath").toString();
            businessaddress = session.getAttribute("businessaddress").toString();
            city = session.getAttribute("city").toString();
            state = session.getAttribute("state").toString();
            pincode = session.getAttribute("pincode").toString();
            countrycode = session.getAttribute("countrycode").toString();
            contactnumber = session.getAttribute("contactnumber").toString();
            contactname = session.getAttribute("contactname").toString();
            actualLogoPath = session.getAttribute("actuallogopath").toString();
        }
        catch(Exception e){
                out.println("Error occured while adding the Card. Please try again");
        }

            try{
            System.out.println("Signup Java");
            System.out.println(businessname+"\n"+businessdesc+"\n"+email+"\n"+password+"\nPath :"+path+"\n"+businessaddress+"\n"+city+"\n"+countrycode);
            com.server.Constants.logger.info(businessname+"\n"+businessdesc+"\n"+email+"\n"+password+"\nPath :"+path+"\n"+businessaddress+"\n"+city+"\n"+countrycode);

            punchCardName = request.getParameter("punchcardname");
            noofpunches = request.getParameter("noofpunches");
//            valueofpunch = request.getParameter("punchvalue");
//            selling_price_punch = request.getParameter("sppunchcard");
            valueofpunch = request.getParameter("float_val_of_punch");
            selling_price_punch = request.getParameter("float_val_of_punchcard");
            discount = request.getParameter("discount");
            expirydate = request.getParameter("expirydate");
            value_of_each_punch_disc = request.getParameter("disc_value_each_punch");
            String restrict = request.getParameter("restrictiontime");

            restriction_time = Integer.parseInt(restrict);
            disc_value_of_each_punch = (Float.valueOf(value_of_each_punch_disc)).floatValue();
            float_val_of_each_punch = (Float.valueOf(valueofpunch)).floatValue();
            float_val_of_each_punchcard = (Float.valueOf(selling_price_punch)).floatValue();

            System.out.println("Value of Punches :\n");
            System.out.println(punchCardName+"\n"+noofpunches+"\n"+float_val_of_each_punch+"\n"+float_val_of_each_punchcard+"\n"+discount+"\n"+expirydate);
            com.server.Constants.logger.info(punchCardName+"\n"+noofpunches+"\n"+float_val_of_each_punch+"\n"+float_val_of_each_punchcard+"\n"+discount+"\n"+expirydate);
            Date time1=new Date();
            Calendar cal1 =  Calendar.getInstance();
            cal1.setTime(time1);
//          int hour= cal1.HOUR;
          cal1.add(Calendar.YEAR,1);
          cal1.add(Calendar.DATE,-1);
          Date date=cal1.getTime();
          System.out.println(""+time1);
          sqlDate = new java.sql.Date(date.getTime());
          System.out.println("<br>"+sqlDate);


           // sqlDate = new java.sql.Date(new java.util.Date().getTime());
            
           /* long aStart=000000000;
            long aEnd = 999999999;
            Random generator = new Random();
            generator.setSeed(System.currentTimeMillis());
                if ( aStart > aEnd ) {
                    throw new IllegalArgumentException("Start cannot exceed End.");
            }
            //get the range, casting to long to avoid overflow problems
            long range = (long)aEnd - (long)aStart + 1;
            // compute a fraction of the range, 0 <= frac < range
            long fraction = (long)(range * generator.nextDouble());
            long randomNumber =  (long)(fraction + aStart);
            System.out.println("Generated : " + randomNumber);*/

            Date time2=new Date();
            DateFormat formatter ;
            formatter = new SimpleDateFormat("yyMMddHHmmssSSSSS");
            String strtimeDate=formatter.format(time2);
            orangeCode = ""+strtimeDate;

           // disc_value_of_each_punch = (selling_price_punch/noofpunches);
      
            int businessuserid = insertIntoBusiness_Users();
            insertPaidPunchDetails(businessuserid);
            sendEmail(businessuserid);
            response.sendRedirect("emailnotification.jsp");
        }catch(Exception e){
            out.println("Error occured while adding the Card. Please try again");
        }
            
        
        try {
            /* TODO output your page here
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet signup_paidpunch_add</title>");
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet signup_paidpunch_add at " + request.getContextPath () + "</h1>");
            out.println("</body>");
            out.println("</html>");
            */
        } finally { 
            out.close();
        }
    } 

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
//        processRequest(request, response);

        try{
           config = getServletConfig();
           context = config.getServletContext();
       }catch(Exception e){

       }
        com.server.Constants.loadJDBCConstants(context);
       String code = "00";
       String punch_card_name="";
       try{
       punch_card_name = request.getParameter("punchcardname");
//       business_name = request.getParameter("businessname");
       }catch(Exception e){

       }

		PrintWriter out = response.getWriter();
		if(request.getParameter(punch_card_name) != null){//&&request.getParameter("businessname") != null) {


                        code = getPunchCardName(punch_card_name);//,business_name);
                }

                /*The value to be returned for code is between the following 3:
                 "00" : Email id and Business not registered before
                 "01" : Email id has already been registered
                 "03" : Business Name has already been registered by that name*/
  	        out.println(code);
    } 

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
    throws ServletException, IOException {
        processRequest(request, response);

       
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

   public int insertIntoBusiness_Users() throws ServletException, SQLException, IOException{
        FileInputStream fs=null;
       try {
            File file = new File(path);//"C:\\Documents and Settings\\admin\\My Documents\\Paid Punch\\uploaded files\\" + "images\\"+finalimage);

            fs = new FileInputStream(file);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(signup_paidpunch_add.class.getName()).log(Level.SEVERE, null, ex);
        }

            int insertedUserId = 0;
            try{
            db = new DBConnection();
            conn = db.con;
            st =  db.stmt;
                        String INSERT_RECORD = "Insert into business_users(business_name, email_id,password,secretcode,buss_desc,isemailverified,bussiness_logo,role,address,city,state,country,pincode,contactno,contactname,logo_path) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        //Constants.logger.info("Insert Query is "+INSERT_RECORD);
                        com.server.Constants.logger.info("Insert Query is "+INSERT_RECORD);
                        pstmt = (PreparedStatement) conn.prepareStatement(INSERT_RECORD);
                        pstmt.setString(1, businessname);
                        pstmt.setString(2, email);
                        pstmt.setString(3, password);
                        pstmt.setString(4, securityCode);
                        pstmt.setString(5, businessdesc);
                        pstmt.setString(6, "N");
                        pstmt.setBinaryStream(7,fs,fs.available());
                        pstmt.setString(8, "user");
                        pstmt.setString(9, businessaddress);
                        pstmt.setString(10, city);
                        pstmt.setString(11, state);
                        pstmt.setString(12, countrycode);
                        pstmt.setString(13, pincode);
                        pstmt.setString(14, contactnumber);
                        pstmt.setString(15, contactname);
                        pstmt.setString(16, actualLogoPath);
                        pstmt.executeUpdate();

 

                rs = st.executeQuery("Select LAST_INSERT_ID() from business_users");

                if(rs.next()){
                      insertedUserId = Integer.parseInt(rs.getObject(1).toString());
                      // Constants.logger.info("The inserted value id was "+cmv.getAppDistHitId());
                }


               String securityCodequery = "Update secretcode set code_used = 'Y' where code_value ='"+securityCode+"'";
               com.server.Constants.logger.info("The query is "+securityCodequery);
               System.out.println("The query is "+securityCodequery);
               st.executeUpdate(securityCodequery);
               

            }catch(SQLException sqle){
                    //Constants.logger.error("Error in Sql in AppDistributor Hits"+sqle.getMessage());
                throw new ServletException("SQL Exception.", sqle);
            } finally{
                    try{
                        if(pstmt != null) {
                              pstmt.close();
  //                            Constants.logger.info("Closing Prepared Statement ");
                              pstmt = null;
                          }

                        if(rs != null) {
                              rs.close();
    //                          Constants.logger.info("Closing rs Statement ");
                              rs = null;
                          }
                          db.closeConnection();
                      } catch (SQLException e) {
                            //Constants.logger.error("Error in Sql in App Distributor Hits"+e.getMessage());
                      }
            }
            return insertedUserId;
       }

      public void insertPaidPunchDetails(int businessuserid) throws ServletException, SQLException{


            try{
            db = new DBConnection();
            conn = db.con;
            st =  db.stmt;
                        String INSERT_RECORD = "Insert into punch_card(punch_card_name, no_of_punches_per_card,value_of_each_punch,selling_price_of_punch_card,expiry_date,effective_discount,orange_qrcode_value,business_userid,qrcode,disc_value_of_each_punch,restriction_time) values(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)";
                        //Constants.logger.info("Insert Query is "+INSERT_RECORD);
                        com.server.Constants.logger.info("The query is "+INSERT_RECORD);
                        pstmt = (PreparedStatement) conn.prepareStatement(INSERT_RECORD);
                        pstmt.setString(1, punchCardName);
                        pstmt.setString(2, noofpunches);
                        pstmt.setFloat(3,  float_val_of_each_punch);
                        pstmt.setFloat(4, float_val_of_each_punchcard);
                        pstmt.setDate(5,sqlDate);
                        pstmt.setString(6, discount);
                        pstmt.setString(7, orangeCode);
                        pstmt.setInt(8, businessuserid);
                        pstmt.setString(9, punchCardName);
                        pstmt.setFloat(10 , disc_value_of_each_punch);
                        pstmt.setInt(11 , restriction_time);
                        pstmt.executeUpdate();




            }catch(SQLException sqle){
                    //Constants.logger.error("Error in Sql in AppDistributor Hits"+sqle.getMessage());
                throw new ServletException("SQL Exception.", sqle);
            } finally{
                    try{
                        if(pstmt != null) {
                              pstmt.close();
  //                            Constants.logger.info("Closing Prepared Statement ");
                              pstmt = null;
                          }

                        if(rs != null) {
                              rs.close();
    //                          Constants.logger.info("Closing rs Statement ");
                              rs = null;
                          }
                          db.closeConnection();
                      } catch (SQLException e) {
                            //Constants.logger.error("Error in Sql in App Distributor Hits"+e.getMessage());
                      }
            }
            
       }


      public void sendEmail(int businessuserid){
          try {

                 try{
                    recipient_email_id = email;
                 }
                 catch(Exception e){

                 }
                 com.server.Constants.logger.info("Recipient Email : "+recipient_email_id);
                 Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());

                 boolean debug = false;

 //                String password = getPassword(recipient_email_id);

/*
                 //Set the host smtp address
                 Properties props = new Properties();
                 props.put("mail.smtp.host", SMTP_HOST_NAME);
                 props.put("mail.smtp.auth", "true");
                 props.put("mail.debug", "true");
                 props.put("mail.smtp.port", SMTP_PORT);
                 props.put("mail.smtp.socketFactory.port", SMTP_PORT);
                 //props.setProperty("mail.user", SMTP_AUTH_USER);
                 //props.setProperty("mail.password", SMTP_AUTH_PWD);
                 props.put("mail.smtp.socketFactory.class", SSL_FACTORY);
                 props.put("mail.smtp.socketFactory.fallback", "false");

                 //    url = new URLName(protocol,SMTP_HOST_NAME,-1, mbox,SMTP_AUTH_USER,SMTP_AUTH_USER);
                 //   Authenticator auth = getPasswordAuthentication();SMTP_AUTH_USER,SMTP_AUTH_PWD);
                    Authenticator auth = new SMTPAuthenticator();
                    Session session1 = Session.getDefaultInstance(props, auth);
                  //  Session session = Session.getDefaultInstance(props, new javax.mail.Authenticator()
                    session1.setDebug(debug);

                    // create a message
                    Message msg = new MimeMessage(session1);

                    // set the from and to address
                    InternetAddress addressFrom = new InternetAddress(emailFromAddress);
                    msg.setFrom(addressFrom);

                    InternetAddress addressTo = new InternetAddress(recipient_email_id);

                    msg.setRecipient(Message.RecipientType.TO, addressTo);


                    // Setting the Subject and Content Type
                    com.server.Constants.logger.info("Setting Subject and Receipient");
                    msg.setSubject(emailSubjectTxt);
                    //emailMsgTxt = "Congratulations for Signing Up with Paid Punch!!! \nPlease click on the Following link to complete your registration : \n\n";
                    emailMsgTxt = "You\'re almost done! Please click the following link to verify your email and complete your PaidPunch registration:  \n\n";
                    emailMsgTxt += com.server.Constants.IP_URL+"/paid_punch/verifybususer?uid="+businessuserid+"&email="+email+"\n\n";
                    msg.setContent(emailMsgTxt, "text/plain");
                    Transport.send(msg);
*/
            emailMsgTxt = "You\'re almost done! Please click the following link to verify your email and complete your PaidPunch registration:  \n\n";
            emailMsgTxt += com.server.Constants.IP_URL+"/paid_punch/verifybususer?uid="+businessuserid+"&email="+email+"\n\n";

            messageSending(emailSubjectTxt, recipient_email_id , emailMsgTxt);


            /* TODO output your page here
            out.println("<html>");
            out.println("<head>");
            out.println("<title>Servlet forgot_pass_mail_send</title>");
            out.println("</head>");
            out.println("<body>");
            out.println("<h1>Servlet forgot_pass_mail_send at " + request.getContextPath () + "</h1>");
            out.println("</body>");
            out.println("</html>");
            */
        }catch(Exception e){
           com.server.Constants.logger.info("Error in Sending Email : "+e.getMessage());
           e.printStackTrace();
        }
      }

      public void sendEmail_For_app_user(String appid,String useremail){
          try {
                String emailContentforapp = "";
                 try{
                    recipient_email_id = useremail;
                 }
                 catch(Exception e){
                 }
                 com.server.Constants.logger.info("Recipient Email : "+recipient_email_id);
                 /*Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
                 boolean debug = false;
                 Properties props = new Properties();
                 props.put("mail.smtp.host", SMTP_HOST_NAME);
                 props.put("mail.smtp.auth", "true");
                 props.put("mail.debug", "true");
                 props.put("mail.smtp.port", SMTP_PORT);
                 props.put("mail.smtp.socketFactory.port", SMTP_PORT);
                 props.put("mail.smtp.socketFactory.class", SSL_FACTORY);
                 props.put("mail.smtp.socketFactory.fallback", "false");
                // props.put("mail.smtp.starttls.enable", "true");
                 
                 Authenticator auth = new SMTPAuthenticator();
                    Session session1 = Session.getDefaultInstance(props, auth);
                    session1.setDebug(debug);
                    Message msg = new MimeMessage(session1);
                    InternetAddress addressFrom = new InternetAddress(emailFromAddress);
                    msg.setFrom(addressFrom);
                    InternetAddress addressTo = new InternetAddress(recipient_email_id);
                    msg.setRecipient(Message.RecipientType.TO, addressTo);
                    msg.setSubject(emailSubjectTxt);*/
                    emailContentforapp = "Thank you for signing up with PaidPunch!<br> You\'re just a couple steps away from saving lots of money at great businesses throughout your city!<br>Click the following link to confirm your email address:<br> ";
                    emailContentforapp += com.server.Constants.IP_URL+"/paid_punch/verifyappuser?userid="+appid+"&email="+useremail+"<br>";
                    emailContentforapp+="<br>Enjoy!<br>"
                            + "The <a href=http://twitter.com/#!/paidpunch>@PaidPunch</a> Team";
                   // msg.setContent(emailMsgTxt, "text/html");
                   // Transport.send(msg);

                    appUsermessageSending(emailSubjectTxt,recipient_email_id , emailContentforapp);

        }catch(Exception e){
            e.printStackTrace();
            com.server.Constants.logger.info(e.getStackTrace());
        }
      }


      public void sendEmail_For_forgotPassword(String Password,String useremail){
          try {
                String emailContentforForgotPassword="";
                 try{
                    recipient_email_id = useremail;
                 }
                 catch(Exception e){
                 }
                 com.server.Constants.logger.info("Recipient Email : "+recipient_email_id);
                /*Security.addProvider(new com.sun.net.ssl.internal.ssl.Provider());
                 boolean debug = false;
                 Properties props = new Properties();
                 props.put("mail.smtp.host", SMTP_HOST_NAME);
                 props.put("mail.smtp.auth", "true");
                 props.put("mail.debug", "true");
                 props.put("mail.smtp.port", SMTP_PORT);
                 props.put("mail.smtp.socketFactory.port", SMTP_PORT);
                // props.setProperty("mail.user", SMTP_AUTH_USER);
                // props.setProperty("mail.password", SMTP_AUTH_PWD);
                props.put("mail.smtp.socketFactory.class", SSL_FACTORY);
                 props.put("mail.smtp.socketFactory.fallback", "false");
                    Authenticator auth = new SMTPAuthenticator();
                    Session session1 = Session.getDefaultInstance(props, auth);
                    session1.setDebug(debug);
                    Message msg = new MimeMessage(session1);
                    InternetAddress addressFrom = new InternetAddress(emailFromAddress);
                    msg.setFrom(addressFrom);
                    InternetAddress addressTo = new InternetAddress(recipient_email_id);
                    msg.setRecipient(Message.RecipientType.TO, addressTo);
                    msg.setSubject(emailSubjectTxt);*/
                    emailContentforForgotPassword = "Dear  "+useremail+",<br><br>We have processed your request for password retrieval. Your account details are mentioned below:"
                            + "<br><br>UserName:  "+useremail+"<br>Password:  "+Password+"<br><br>Please keep them safe.<br><br>Regards,<br>PaidPunch Team ";
                  //  emailMsgTxt += com.server.Constants.IP_URL+"/paid_punch/verifyappuser?userid="+appid+"&email="+useremail+"<br>";
                  //    msg.setContent(emailMsgTxt, "text/html");
                  //  Transport.send(msg);

                    appUsermessageSending("PaidPunch Credentials",recipient_email_id , emailContentforForgotPassword);
        }catch(Exception e){
            com.server.Constants.logger.info(""+e.getStackTrace());
        }
      }

        private void messageSending(String mail_subject, String mail_to, String mail_body) throws MessagingException {
		Message message = new MimeMessage(getSession());

		message.addRecipient(RecipientType.TO, new InternetAddress(mail_to));
		message.addFrom(new InternetAddress[] { new InternetAddress(SMTP_AUTH_USER) });

		message.setSubject(mail_subject);
		message.setContent(mail_body, "text/plain");

		Transport.send(message);
	}

        private void appUsermessageSending(String mail_subject, String mail_to, String mail_body) throws MessagingException {
		Message message = new MimeMessage(getSession());

		message.addRecipient(RecipientType.TO, new InternetAddress(mail_to));
		message.addFrom(new InternetAddress[] { new InternetAddress(SMTP_AUTH_USER) });

		message.setSubject(mail_subject);
		message.setContent(mail_body, "text/html");

		Transport.send(message);
	}


      public class SMTPAuthenticator extends javax.mail.Authenticator {
		private PasswordAuthentication authentication;

		public SMTPAuthenticator() {
			String username =SMTP_AUTH_USER;
			String password = SMTP_AUTH_PWD;
			authentication = new PasswordAuthentication(username, password);
		}

		public PasswordAuthentication getPasswordAuthentication() {
			return authentication;
		}
	}

      public Session getSession() {
		SMTPAuthenticator authenticator = new SMTPAuthenticator();

		Properties properties = new Properties();
		properties.setProperty("mail.smtp.submitter", authenticator.getPasswordAuthentication().getUserName());
		properties.setProperty("mail.smtp.auth", "true");

		properties.setProperty("mail.smtp.host", SMTP_HOST_NAME);
		properties.setProperty("mail.smtp.port", "25");

		return Session.getInstance(properties, authenticator);
	}


       public String getPunchCardName(String punchCardName) throws ServletException{//,String businessname) throws ServletException{
            DBConnection db = null;
            Statement stmt = null;
            ResultSet rs = null;
            String status = "00" ;

            try {
                               db = new DBConnection();
                               stmt = db.stmt;
                               String query1 = "SELECT * from punch_card where punch_card_name ='"+punchCardName+"'";
                               rs = stmt.executeQuery(query1);
                               com.server.Constants.logger.info("The select query is " + query1);
                              // displaying records

                              if(rs.next()){
                                    status = "01";
                              }

                      }catch (SQLException e) {
                            com.server.Constants.logger.error("Error in Sql in checksecretcode.java in getsecretcode "+e.getMessage());
                          throw new ServletException("SQL Exception.", e);
                      } finally {
                      try {
                          if(rs != null) {
                              rs.close();
                              //Constants.logger.info("Closing rs Statement ");
                              rs = null;
                          }
                          db.closeConnection();

                      } catch (SQLException e) {
                            com.server.Constants.logger.error("Error in closing SQL in checksecretcode.java"+e.getMessage());
                      }
                   }
                   return status;
                }


}
